// Automatically generated by MockGen. DO NOT EDIT!
// Source: api/src/service/merchant (interfaces: AthMerchantService)

package mock

import (
	models "api/src/models"
	context "context"
	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
)

// Mock of AthMerchantService interface
type MockAthMerchantService struct {
	ctrl     *gomock.Controller
	recorder *_MockAthMerchantServiceRecorder
}

// Recorder for MockAthMerchantService (not exported)
type _MockAthMerchantServiceRecorder struct {
	mock *MockAthMerchantService
}

func NewMockAthMerchantService(ctrl *gomock.Controller) *MockAthMerchantService {
	mock := &MockAthMerchantService{ctrl: ctrl}
	mock.recorder = &_MockAthMerchantServiceRecorder{mock}
	return mock
}

func (_m *MockAthMerchantService) EXPECT() *_MockAthMerchantServiceRecorder {
	return _m.recorder
}

func (_m *MockAthMerchantService) AddTeamMember(_param0 context.Context, _param1 *gorm.DB, _param2 models.TeamMemberReq) models.Response {
	ret := _m.ctrl.Call(_m, "AddTeamMember", _param0, _param1, _param2)
	ret0, _ := ret[0].(models.Response)
	return ret0
}

func (_mr *_MockAthMerchantServiceRecorder) AddTeamMember(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddTeamMember", arg0, arg1, arg2)
}

func (_m *MockAthMerchantService) CreateMerchant(_param0 context.Context, _param1 *gorm.DB, _param2 models.AthMerchant) models.Response {
	ret := _m.ctrl.Call(_m, "CreateMerchant", _param0, _param1, _param2)
	ret0, _ := ret[0].(models.Response)
	return ret0
}

func (_mr *_MockAthMerchantServiceRecorder) CreateMerchant(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateMerchant", arg0, arg1, arg2)
}

func (_m *MockAthMerchantService) CreateMerchantUser(_param0 context.Context, _param1 *gorm.DB, _param2 models.AthMerchantUser) models.Response {
	ret := _m.ctrl.Call(_m, "CreateMerchantUser", _param0, _param1, _param2)
	ret0, _ := ret[0].(models.Response)
	return ret0
}

func (_mr *_MockAthMerchantServiceRecorder) CreateMerchantUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateMerchantUser", arg0, arg1, arg2)
}

func (_m *MockAthMerchantService) DeleteTeamMember(_param0 context.Context, _param1 *gorm.DB, _param2 models.AthVenueUser) models.Response {
	ret := _m.ctrl.Call(_m, "DeleteTeamMember", _param0, _param1, _param2)
	ret0, _ := ret[0].(models.Response)
	return ret0
}

func (_mr *_MockAthMerchantServiceRecorder) DeleteTeamMember(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteTeamMember", arg0, arg1, arg2)
}

func (_m *MockAthMerchantService) EditMerchant(_param0 context.Context, _param1 *gorm.DB, _param2 models.AthMerchant) models.Response {
	ret := _m.ctrl.Call(_m, "EditMerchant", _param0, _param1, _param2)
	ret0, _ := ret[0].(models.Response)
	return ret0
}

func (_mr *_MockAthMerchantServiceRecorder) EditMerchant(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EditMerchant", arg0, arg1, arg2)
}

func (_m *MockAthMerchantService) GetMerchantByID(_param0 context.Context, _param1 *gorm.DB, _param2 int) models.Response {
	ret := _m.ctrl.Call(_m, "GetMerchantByID", _param0, _param1, _param2)
	ret0, _ := ret[0].(models.Response)
	return ret0
}

func (_mr *_MockAthMerchantServiceRecorder) GetMerchantByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMerchantByID", arg0, arg1, arg2)
}

func (_m *MockAthMerchantService) GetMerchantByUserID(_param0 context.Context, _param1 *gorm.DB, _param2 int) models.Response {
	ret := _m.ctrl.Call(_m, "GetMerchantByUserID", _param0, _param1, _param2)
	ret0, _ := ret[0].(models.Response)
	return ret0
}

func (_mr *_MockAthMerchantServiceRecorder) GetMerchantByUserID(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMerchantByUserID", arg0, arg1, arg2)
}

func (_m *MockAthMerchantService) GetTeamData(_param0 context.Context, _param1 *gorm.DB, _param2 int, _param3 string) models.Response {
	ret := _m.ctrl.Call(_m, "GetTeamData", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(models.Response)
	return ret0
}

func (_mr *_MockAthMerchantServiceRecorder) GetTeamData(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTeamData", arg0, arg1, arg2, arg3)
}

func (_m *MockAthMerchantService) UpdateTeamMemberPrivileges(_param0 context.Context, _param1 *gorm.DB, _param2 models.AthVenueUser) models.Response {
	ret := _m.ctrl.Call(_m, "UpdateTeamMemberPrivileges", _param0, _param1, _param2)
	ret0, _ := ret[0].(models.Response)
	return ret0
}

func (_mr *_MockAthMerchantServiceRecorder) UpdateTeamMemberPrivileges(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateTeamMemberPrivileges", arg0, arg1, arg2)
}

func (_m *MockAthMerchantService) VerifyGetMerchant(_param0 context.Context, _param1 *gorm.DB, _param2 int32) models.Response {
	ret := _m.ctrl.Call(_m, "VerifyGetMerchant", _param0, _param1, _param2)
	ret0, _ := ret[0].(models.Response)
	return ret0
}

func (_mr *_MockAthMerchantServiceRecorder) VerifyGetMerchant(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VerifyGetMerchant", arg0, arg1, arg2)
}
